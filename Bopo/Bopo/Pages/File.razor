@page "/file"
@using System.IO
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostEnvironment

<Menu></Menu>

<div class=" col-xl-4 offset-lg-3 offset-xl-4">
<RadzenCard Style="border-radius:1.4rem;">
                <div class="d-flex flex-row">
                    <RadzenImage Path="/images/bopo.svg" Style="width: 150px; height: 150px;" />
                    <h1 style="align-self:safe center;margin-left: 40px;font-size:50px">Gestione File</h1>
                </div>
</RadzenCard>
</div>


<div class="row my-5">
    <div class="col-lg-6 offset-lg-3">
            <div class="row mb-3">
                <div class="col-md-6" style="align-self: center;">
        <RadzenCard Style="width: 100%; height: 500px;border-radius: 1.4rem;">
            <RadzenTree Data=@entries Expand=@LoadFiles >
                <RadzenTreeLevel Text=@GetTextForNode Template=@FileOrFolderTemplate />
            </RadzenTree>

        </RadzenCard>
                </div>
                <div class="col">
        <RadzenCard Style="width: 100%; height: 500px;border-radius: 1.4rem;">
                    <h4 class="mb-4" >Carica un file</h4>
                    <RadzenButton  Style="margin-bottom: 20px" Text="Upload" Click=@(args => upload.Upload()) class="d-block mt-7" ButtonStyle="ButtonStyle.Success" Icon="file_upload"/>
                    <RadzenUpload Style="margin-bottom: 20px" @ref="upload" Auto="false" Multiple="true" Url="upload/multiple" Change=@(args => OnChange(args, "Manual Upload"))
                            Progress=@(args => OnProgress(args, "Manual Upload")) class="w-300" />
        </RadzenCard>
                </div>
            </div>
    </div>
</div>


@code {
    IEnumerable<string> entries;
    protected override void OnInitialized()
    {   
        entries = Directory.GetDirectories(HostEnvironment.WebRootPath+"/storage")
                           .Where(entry =>
                           {
                               var name = Path.GetFileName(entry);

                               return !name.StartsWith(".") && name != "bin" && name != "obj";
                           });

    }

    void LoadFiles(TreeExpandEventArgs args)
    {
        var directory = args.Value as string;

        args.Children.Data = Directory.EnumerateFileSystemEntries(directory);
        args.Children.Text = GetTextForNode;
        args.Children.HasChildren = (path) => Directory.Exists((string)path);
        args.Children.Template = FileOrFolderTemplate;
    }

    string GetTextForNode(object data)
    {
        return Path.GetFileName((string)data);
    }

    RenderFragment<RadzenTreeItem> FileOrFolderTemplate = (context) => builder =>
    {
        string path = context.Value as string;
        bool isDirectory = Directory.Exists(path);

        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, nameof(RadzenIcon.Icon), isDirectory ? "folder" : "insert_drive_file");
        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };
        EventConsole console;
        RadzenUpload upload;

    int progress;
    bool showProgress;
    bool showComplete;

    void CompleteUpload()
    {
        showProgress = false;
        showComplete = true;
    }

    void TrackProgress(UploadProgressArgs args)
    {
        showProgress = true;
        showComplete = false;
        progress = args.Progress;
    }

    int customParameter = 1;

    void OnChange(UploadChangeEventArgs args, string name)
    {
        foreach (var file in args.Files)
        {
            console.Log($"File: {file.Name} / {file.Size} bytes");
        }

        console.Log($"{name} changed");
    }

    void OnProgress(UploadProgressArgs args, string name)
    {
        console.Log($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                console.Log($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

    void OnComplete(UploadCompleteEventArgs args)
    {
        console.Log($"Server response: {args.RawResponse}");
    }
}