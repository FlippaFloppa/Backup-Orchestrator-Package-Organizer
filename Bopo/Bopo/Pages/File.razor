@page "/file"
@using System.IO
@using Bopo.Autenticazione
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostEnvironment
@attribute [Authorize(Roles = "Utente")]

<Menu></Menu>

<div class=" col-xl-4 offset-lg-3 offset-xl-4">
<RadzenCard Style="border-radius:1.4rem;">
                <div class="d-flex flex-row">
                    <RadzenImage Path="/images/bopo.svg" Style="width: 150px; height: 150px;" />
                    <h1 style="align-self:safe center;margin-left: 40px;font-size:50px">Gestione File</h1>
                </div>
</RadzenCard>
</div>


<div class="row my-5">
    <div class="col-lg-6 offset-lg-3">
            <div class="row mb-3">
                <div class="col-md-6" style="align-self: center;">
        <RadzenCard Style="width: 100%; height: 500px;border-radius: 1.4rem;">
            <RadzenTree Data=@entries Expand=@LoadFiles >
                <RadzenTreeLevel Text=@GetTextForNode Template=@FileOrFolderTemplate />
                
            </RadzenTree>

        </RadzenCard>
        
                </div>
                <div class="col">
        <RadzenCard Style="width: 100%; height: 500px;border-radius: 1.4rem;">
                    <h4 class="mb-4" >Carica un file</h4>
        <InputFile class="btn" OnChange="@LoadFiles" multiple />
        <p>
    <label>
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}
        </RadzenCard>
                </div>
            </div>
    </div>
</div>
<style>
.upload-btn-wrapper {
  position: relative;
  overflow: hidden;
  display: inline-block;
}

.btn {
  border: 2px solid gray;
  color: gray;
  background-color: white;
  padding: 8px 20px;
  border-radius: 8px;
  font-size: 15px;
  font-weight: bold;
}

.upload-btn-wrapper input[type=file] {
  font-size: 80px;
  position: absolute;
  left: 0;
  top: 0;
  opacity: 0;
}
</style>

@code {
    IEnumerable<string> entries;
    protected override void OnInitialized()
    {   
        entries = Directory.GetFiles(HostEnvironment.WebRootPath+"/storage");
                           

    }

    void LoadFiles(TreeExpandEventArgs args)
    {
        var directory = args.Value as string;

        args.Children.Data = Directory.EnumerateFileSystemEntries(directory);
        args.Children.Text = GetTextForNode;
        args.Children.HasChildren = (path) => Directory.Exists((string)path);
        args.Children.Template = FileOrFolderTemplate;
    }

    string GetTextForNode(object data)
    {
        return Path.GetFileName((string)data);
    }

    RenderFragment<RadzenTreeItem> FileOrFolderTemplate = (context) => builder =>
    {
        string path = context.Value as string;
        bool isDirectory = Directory.Exists(path);

        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, nameof(RadzenIcon.Icon), isDirectory ? "folder" : "insert_drive_file");
        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };
        EventConsole console;
        RadzenUpload upload;

    int progress;
    bool showProgress;
    bool showComplete;

    void CompleteUpload()
    {
        showProgress = false;
        showComplete = true;
    }

    void TrackProgress(UploadProgressArgs args)
    {
        showProgress = true;
        showComplete = false;
        progress = args.Progress;
    }

    int customParameter = 1;

    void OnChange(UploadChangeEventArgs args, string name)
    {
        foreach (var file in args.Files)
        {
            console.Log($"File: {file.Name} / {file.Size} bytes");
        }

        console.Log($"{name} changed");
    }

    void OnProgress(UploadProgressArgs args, string name)
    {
        console.Log($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                console.Log($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

    void OnComplete(UploadCompleteEventArgs args)
    {
        console.Log($"Server response: {args.RawResponse}");
    }
     private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 10000;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {

                loadedFiles.Add(file);

                var path = Path.Combine("wwwroot/storage",
                        file.Name);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            

        }

        isLoading = false;
    }
    }