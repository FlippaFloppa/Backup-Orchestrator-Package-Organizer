@page "/file"
@using System.IO
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostEnvironment

<Menu></Menu>

<div class=" col-xl-4 offset-lg-3 offset-xl-4">
<RadzenCard Style="border-radius:1.4rem;">
                <div class="d-flex flex-row">
                    <RadzenImage Path="/images/bopo.svg" Style="width: 150px; height: 150px;" />
                    <h1 style="align-self:safe center;margin-left: 40px;font-size:50px">Gestione File</h1>
                </div>
</RadzenCard>
</div>


<div class="row my-5">
    <div class="col-lg-6 offset-lg-3">
        <RadzenCard>
            <RadzenTree Data=@entries Expand=@LoadFiles Style="width: 100%; height: 300px">
                <RadzenTreeLevel Text=@GetTextForNode Template=@FileOrFolderTemplate />
            </RadzenTree>
        </RadzenCard>
    </div>
</div>

@code {
    IEnumerable<string> entries;
    protected override void OnInitialized()
    {
        entries = Directory.GetDirectories(HostEnvironment.ContentRootPath)
                           .Where(entry =>
                           {
                               var name = Path.GetFileName(entry);

                               return !name.StartsWith(".") && name != "bin" && name != "obj";
                           });

    }

    void LoadFiles(TreeExpandEventArgs args)
    {
        var directory = args.Value as string;

        args.Children.Data = Directory.EnumerateFileSystemEntries(directory);
        args.Children.Text = GetTextForNode;
        args.Children.HasChildren = (path) => Directory.Exists((string)path);
        args.Children.Template = FileOrFolderTemplate;
    }

    string GetTextForNode(object data)
    {
        return Path.GetFileName((string)data);
    }

    RenderFragment<RadzenTreeItem> FileOrFolderTemplate = (context) => builder =>
    {
        string path = context.Value as string;
        bool isDirectory = Directory.Exists(path);

        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, nameof(RadzenIcon.Icon), isDirectory ? "folder" : "insert_drive_file");
        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };
}